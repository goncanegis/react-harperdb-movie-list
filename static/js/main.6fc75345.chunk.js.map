{"version":3,"sources":["components/Movie.js","App.js","reportWebVitals.js","index.js"],"names":["Movie","useHarperDB","query","operation","sql","Math","floor","random","interval","data","loading","error","refresh","className","title","rating","date","hours","minutes","src","cover","alt","genres","map","genre","index","description","stars","star","writers","writer","directors","director","href","website","onClick","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","url","process","user","password","document","getElementById"],"mappings":"qQA0GeA,EAvGD,WACZ,MAAsCC,sBAAY,CAChDC,MAAO,CACLC,UAAW,MACXC,IAAI,6CAAD,OACDC,KAAKC,MAAsB,EAAhBD,KAAKE,UAAgB,IAGpCC,SAAU,MAPZ,mBAAKC,EAAL,KAAWC,EAAX,KAAoBC,EAApB,KAA2BC,EAA3B,KAUA,OAAIF,EACK,+CAGLD,EAEA,gCACE,sBAAKI,UAAU,cAAf,UACE,sBAAKA,UAAU,kBAAf,UACE,oBAAIA,UAAU,QAAd,SAAuBJ,EAAK,GAAGK,QAC/B,qBAAKD,UAAU,SAAf,SACE,sBAAKA,UAAU,UAAf,UACE,sBAAMA,UAAU,WAAhB,SAA4BJ,EAAK,GAAGM,SADtC,IAEE,sBAAMF,UAAU,aAAhB,wBAKN,sBAAKA,UAAU,kBAAf,UACE,sBAAMA,UAAU,OAAhB,SAAwBJ,EAAK,GAAGO,OADlC,KAEE,uBAAMH,UAAU,OAAhB,UACGJ,EAAK,GAAGQ,MADX,KACoBR,EAAK,GAAGS,QAD5B,UAIF,qBAAKL,UAAU,QAAf,SACE,qBAAKM,IAAKV,EAAK,GAAGW,MAAOC,IAAI,qBAIjC,qBAAKR,UAAU,SAAf,SACE,oBAAIA,UAAU,eAAd,SACGJ,EAAK,GAAGa,OAAOC,KAAI,SAACC,EAAOC,GAC1B,OACE,6BACE,sBAAMZ,UAAU,mBAAhB,SAAoCW,KAD7BC,UAQjB,sBAAKZ,UAAU,oBAAf,UACE,4BAAIJ,EAAK,GAAGiB,cAEZ,uBACA,8BACG,IADH,YAEY,IACTjB,EAAK,GAAGkB,MAAMJ,KAAI,SAACK,EAAMH,GACxB,OAAO,iCAAmBG,EAAnB,QAAWH,SAGtB,uBACA,8BACG,IADH,WAGGhB,EAAK,GAAGoB,QAAQN,KAAI,SAACO,EAAQL,GAC5B,OACE,uBAAkBZ,UAAU,SAA5B,UACGiB,EADH,KACa,MADFL,SAMjB,uBACA,2CAEGhB,EAAK,GAAGsB,UAAUR,KAAI,SAACS,EAAUP,GAChC,OACE,uBAAkBZ,UAAU,WAA5B,UACGmB,EADH,KACe,MADJP,SAMjB,uBACA,sBAAKZ,UAAU,iBAAf,UACE,mBAAGoB,KAAMxB,EAAK,GAAGyB,QAASrB,UAAU,qBAApC,yBAGA,wBAAQA,UAAU,wBAAwBsB,QAASvB,EAAnD,yCAQD,kDAAqBD,MCnFjByB,MAhBf,WACE,OACE,qBAAKvB,UAAU,MAAf,SACE,sBAAKA,UAAU,iBAAf,UACE,mCACE,oBAAIA,UAAU,UAAd,wBACA,4FAEF,8BACE,cAAC,EAAD,YCAKwB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,mBAAD,CACEC,IAAKC,kDACLC,KAAMD,aACNE,SAAUF,kBAHZ,SAKE,cAAC,EAAD,QAGJG,SAASC,eAAe,SAM1BjB,M","file":"static/js/main.6fc75345.chunk.js","sourcesContent":["import React from 'react';\r\nimport { useHarperDB } from 'use-harperdb';\r\n\r\nconst Movie = () => {\r\n  let [data, loading, error, refresh] = useHarperDB({\r\n    query: {\r\n      operation: 'sql',\r\n      sql: `select * from collection.movie where id = ${\r\n        Math.floor(Math.random() * 8) + 1\r\n      }`,\r\n    },\r\n    interval: 40000, // 40 Seconds\r\n  });\r\n\r\n  if (loading) {\r\n    return <div> Loading... </div>;\r\n  }\r\n\r\n  if (data) {\r\n    return (\r\n      <div>\r\n        <div className='movie-cover'>\r\n          <div className='top-information'>\r\n            <h2 className='title'>{data[0].title}</h2>\r\n            <div className='circle'>\r\n              <div className='ratings'>\r\n                <span className='big-half'>{data[0].rating}</span>/\r\n                <span className='small-half'>10</span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className='supporting-info'>\r\n            <span className='year'>{data[0].date}</span> -\r\n            <span className='time'>\r\n              {data[0].hours}h:{data[0].minutes}m\r\n            </span>\r\n          </div>\r\n          <div className='image'>\r\n            <img src={data[0].cover} alt='Movie Image' />\r\n          </div>\r\n        </div>\r\n\r\n        <div className='genres'>\r\n          <ul className='movie-genres'>\r\n            {data[0].genres.map((genre, index) => {\r\n              return (\r\n                <li key={index}>\r\n                  <span className='movie-genre-item'>{genre}</span>\r\n                </li>\r\n              );\r\n            })}\r\n          </ul>\r\n        </div>\r\n\r\n        <div className='lower-information'>\r\n          <p>{data[0].description}</p>\r\n\r\n          <hr />\r\n          <p>\r\n            {' '}\r\n            Starring:{' '}\r\n            {data[0].stars.map((star, index) => {\r\n              return <span key={index}>{star} - </span>;\r\n            })}\r\n          </p>\r\n          <hr />\r\n          <p>\r\n            {' '}\r\n            Writers:\r\n            {data[0].writers.map((writer, index) => {\r\n              return (\r\n                <span key={index} className='writer'>\r\n                  {writer} -{' '}\r\n                </span>\r\n              );\r\n            })}\r\n          </p>\r\n          <hr />\r\n          <p>\r\n            Directors:\r\n            {data[0].directors.map((director, index) => {\r\n              return (\r\n                <span key={index} className='director'>\r\n                  {director} -{' '}\r\n                </span>\r\n              );\r\n            })}\r\n          </p>\r\n          <hr />\r\n          <div className='action-buttons'>\r\n            <a href={data[0].website} className='visit-movie-button'>\r\n              Visit Movie\r\n            </a>\r\n            <button className='generate-movie-button' onClick={refresh}>\r\n              GENERATE NEW MOVIE\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  } else {\r\n    return <div>Sorry No Data, {error}</div>;\r\n  }\r\n};\r\n\r\nexport default Movie;\r\n","import './App.css';\nimport Movie from './components/Movie';\n\nfunction App() {\n  return (\n    <div className='App'>\n      <div className='main-container'>\n        <header>\n          <h1 className='heading'>Movie List</h1>\n          <h3> A Simple Movie Generator built with React and HarperDB</h3>\n        </header>\n        <div>\n          <Movie />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { HarperDBProvider } from 'use-harperdb';\n\nReactDOM.render(\n  <React.StrictMode>\n    <HarperDBProvider\n      url={process.env.REACT_APP_DB_URL}\n      user={process.env.REACT_APP_USER}\n      password={process.env.REACT_APP_PASSWORD}\n    >\n      <App />\n    </HarperDBProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}